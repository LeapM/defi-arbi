import { expect, util } from 'chai'
import { BigNumber, Contract } from 'ethers'
import { ethers, upgrades } from 'hardhat'
import { getTransactionGas, impersonate, resetNetwork, stopImpersonate } from './utils'
import { ERC20_ABI } from './ABI/ERC20'
import { ABI as WCORE_ABI } from './ABI/WCORE'
import IUniswapV2Router02 from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/dist/src/signer-with-address'
import { abi as chiAbi } from '../abis/chi.json'
import { abi as erc95Abi } from '../abis/erc95.json'
import { CHI, CORE, COREWHALE, DAI, ME, ROUTER, WBTC, WCORE, WDAI, WETH, ETHWHALE, WWBTC } from '../constants/addresses'
import { ONE_BTC } from '../constants/baseUnits'
import { formatUnits, parseUnits } from 'ethers/lib/utils'
import { sign } from 'crypto'
const {
  utils: { formatEther, parseEther },
} = ethers
const approve = async (coreArbi: Contract) => {
  await coreArbi.approve(
    [DAI, CORE, WBTC, DAI, CORE, WDAI, WCORE, WBTC, WWBTC],
    [WDAI, WCORE, WWBTC, ROUTER, ROUTER, ROUTER, ROUTER, ROUTER, ROUTER]
  )
}
describe('CORE ARBI Test', () => {
  let coreArbi: Contract
  let core: Contract
  let uniswapRouter: Contract
  let wcore: Contract
  let signers: SignerWithAddress[]
  beforeEach(async () => {
    await resetNetwork()
    signers = await ethers.getSigners()
    core = new Contract(CORE, ERC20_ABI, ethers.provider)
    wcore = new Contract(WCORE, WCORE_ABI, ethers.provider)
    uniswapRouter = new Contract(ROUTER, IUniswapV2Router02.abi, ethers.provider)

    await impersonate(ME)
    const signer = ethers.provider.getSigner(ME)
    const COREArbi = await ethers.getContractFactory('COREArbi', signer)
    coreArbi = await upgrades.deployProxy(COREArbi)
    await coreArbi.deployed()
    await stopImpersonate(ME)

    await impersonate(COREWHALE)
    core = core.connect(ethers.provider.getSigner(COREWHALE))
    await core.transfer(coreArbi.address, parseEther('10'))
    await stopImpersonate(COREWHALE)

    await impersonate(ETHWHALE)
    const dai = new Contract(DAI, ERC20_ABI, ethers.provider).connect(ethers.provider.getSigner(ETHWHALE))
    await dai.transfer(coreArbi.address, parseEther('20000'))
    await stopImpersonate(ETHWHALE)
  })

  it('assign the owner successfully', async () => {
    const owner = await coreArbi.owner()
    expect(owner).to.equal(ME)
  })

  it('approve underlying token', async () => {
    await impersonate(ME)
    await approve(coreArbi)
    await stopImpersonate(ME)
  })

  it('getArbiProfit works properly', async () => {
    const amount = parseEther('0.5')
    let ethDaiProfit = await coreArbi.getArbiProfit([CORE, WETH, DAI], [WDAI, WCORE], amount)
    expect(ethDaiProfit).to.eq(0)
    await whalePump(uniswapRouter, parseEther('100'))
    ethDaiProfit = await coreArbi.getArbiProfit([CORE, WETH, DAI], [WDAI, WCORE], amount)
    expect(ethDaiProfit).to.eq(parseEther('30.440926208552060053'))

    const daiEthProfit = await coreArbi.getArbiProfit([WCORE, WDAI], [DAI, WETH, CORE], amount)
    console.log(formatEther(daiEthProfit))
    expect(daiEthProfit).to.eq(0)

    const btcEthArbiProfit = await coreArbi.getArbiProfit([CORE, WWBTC], [WBTC, WETH, CORE], amount)
    expect(btcEthArbiProfit).to.eq(0)

    const ethBtcArbiProfit = await coreArbi.getArbiProfit([CORE, WETH, WBTC], [WWBTC, CORE], amount)
    expect(ethBtcArbiProfit).to.eq(65085)
  })

  it('execute sell on eth pair reverted', async () => {
    const amount = parseEther('1')
    const costInDai = parseEther('10')
    await impersonate(ME)
    await approve(coreArbi)
    await expect(coreArbi.executeArbi([CORE, WETH, DAI], [WDAI, WCORE], amount, costInDai)).to.be.revertedWith(
      'no profit'
    )
    await stopImpersonate(ME)
  })

  it('execute dai eth arbi successfully', async () => {
    const amount = parseEther('.5')
    const costInDai = parseEther('10')
    whalePumpDaiPair(uniswapRouter)
    await impersonate(ME)
    await approve(coreArbi)
    const sellPath = [WCORE, WDAI]
    const buyPath = [DAI, WETH, CORE]
    const coreBalanceBefore = await getBalance(CORE, coreArbi.address)
    const profit = await coreArbi.getArbiProfit(sellPath, buyPath, amount)
    console.log('expected profit', formatEther(profit))

    await coreArbi.executeArbi(sellPath, buyPath, amount, costInDai)

    const daiAfter = await getBalance(DAI, coreArbi.address)
    expect(daiAfter).to.eq(parseEther('12.315926959853460959'))

    const coreBalanceAfter = await getBalance(CORE, coreArbi.address)
    const wcoreBalanceAfter = await getBalance(WCORE, coreArbi.address)
    expect(coreBalanceAfter).to.eq(wcoreBalanceAfter)
    expect(coreBalanceBefore).to.eq(coreBalanceAfter.add(wcoreBalanceAfter))
    await stopImpersonate(ME)
  })

  it('execute eth dai arbi successfully', async () => {
    await whalePump(uniswapRouter)
    await impersonate(ME)
    await approve(coreArbi)
    const amount = parseEther('0.5')
    const costInDai = parseEther('10')
    const sellPath = [CORE, WETH, DAI]
    const buyPath = [WDAI, WCORE]
    const profit = await coreArbi.getArbiProfit(sellPath, buyPath, amount)
    console.log('expected profit', formatEther(profit))
    const coreBalanceBefore = await getBalance(CORE, coreArbi.address)
    await coreArbi.executeArbi(sellPath, buyPath, amount, costInDai)
    const wdaiAfter = await getBalance(WDAI, coreArbi.address)
    const daiAfter = await getBalance(DAI, coreArbi.address)
    console.log(formatEther(wdaiAfter), formatEther(daiAfter))
    expect(wdaiAfter).to.eq(parseEther('10922.164546748302130312'))
    const coreBalanceAfter = await getBalance(CORE, coreArbi.address)
    const wcoreBalanceAfter = await getBalance(WCORE, coreArbi.address)

    console.log(formatEther(coreBalanceAfter), formatEther(wcoreBalanceAfter))
    expect(coreBalanceAfter).to.eq(coreBalanceBefore.sub(amount))
    expect(coreBalanceBefore).to.eq(coreBalanceAfter.add(wcoreBalanceAfter))
    await stopImpersonate(ME)
  })

  it('execute eth btc arbi successfully', async () => {
    await whalePump(uniswapRouter)
    await impersonate(ME)
    await approve(coreArbi)
    const amount = parseEther('0.5')
    const costInBTC = ONE_BTC.div(1000)
    const sellPath = [CORE, WETH, WBTC]
    const buyPath = [WWBTC, CORE]
    const profit = await coreArbi.getArbiProfit(sellPath, buyPath, amount)
    console.log('profit', profit.toString())
    const coreBalanceBefore = await getBalance(CORE, coreArbi.address)
    await coreArbi.executeArbi(sellPath, buyPath, amount, costInBTC)
    const coreBalanceAfter = await getBalance(CORE, coreArbi.address)
    const wcoreBalanceAfter = await getBalance(WCORE, coreArbi.address)
    const wbtcBalanceAfter = await getBalance(WBTC, coreArbi.address)
    const wwbtcBalanceAfter = await getBalance(WWBTC, coreArbi.address)
    expect(coreBalanceAfter).to.eq(coreBalanceBefore)
    expect(wcoreBalanceAfter).to.eq(0)
    expect(wbtcBalanceAfter).to.eq(0)
    expect(wwbtcBalanceAfter).to.eq('1008240')
    await stopImpersonate(ME)
  })

  it('execute btc eth arbi successfully', async () => {
    const amount = parseEther('0.5')
    const cost = ONE_BTC.div(10000)
    const sellPath = [CORE, WWBTC]
    const buyPath = [WBTC, WETH, CORE]

    await whaleDump(uniswapRouter)
    await impersonate(ME)
    await approve(coreArbi)
    const profit = await coreArbi.getArbiProfit(sellPath, buyPath, amount)
    const coreBalanceBefore = await getBalance(CORE, coreArbi.address)
    await coreArbi.executeArbi(sellPath, buyPath, amount, cost)
    const coreBalanceAfter = await getBalance(CORE, coreArbi.address)
    const wcoreBalanceAfter = await getBalance(WCORE, coreArbi.address)
    const wbtcBalanceAfter = await getBalance(WBTC, coreArbi.address)
    const wwbtcBalanceAfter = await getBalance(WWBTC, coreArbi.address)
    console.log(formatEther(coreBalanceAfter), formatEther(wcoreBalanceAfter))
    expect(coreBalanceAfter).to.eq(coreBalanceBefore)
    expect(wcoreBalanceAfter).to.eq(0)
    expect(wbtcBalanceAfter).to.eq('45633')
    expect(wwbtcBalanceAfter).to.eq('0')
    await stopImpersonate(ME)
  })

  it('can withdraw asset successfully', async () => {
    await impersonate(ME)
    await coreArbi.withdrawTokens([CORE], [parseEther('1')], ME)
    const balanceAfter = await getBalance(CORE, ME)
    expect(balanceAfter).to.eq(parseEther('0.99'))
    await stopImpersonate(ME)
  })

  it.only('should burn less gas', async () => {
    await whalePump(uniswapRouter)
    await impersonate(ME)
    await approve(coreArbi)
    const amount = parseEther('0.5')
    const costInDai = parseEther('10')
    const sellPath = [CORE, WETH, DAI]
    const buyPath = [WDAI, WCORE]
    const tx = await coreArbi.executeArbi(sellPath, buyPath, amount, costInDai)
    const gasused = await getTransactionGas(tx)
    expect(gasused).to.eq(485657)
    await stopImpersonate(ME)
  })

  it('chi can save gas', async () => {
    await whalePump(uniswapRouter)
    await impersonate(ME)

    const chi = new Contract(CHI, chiAbi, ethers.provider.getSigner(ME))
    await chi.mint(140)
    await chi.approve(coreArbi.address, 10000000)
    await approve(coreArbi)

    const amount = parseEther('0.5')
    const costInDai = parseEther('10')
    const sellPath = [CORE, WETH, DAI]
    const buyPath = [WDAI, WCORE]
    const burnChiGas = parseUnits('101', 'gwei')
    const tx = await coreArbi.executeArbi(sellPath, buyPath, amount, costInDai, {
      gasPrice: burnChiGas,
    })
    const gasused = await getTransactionGas(tx)
    const savedGas = parseUnits('485739', 'wei').sub(gasused)
    expect(savedGas).to.eq('170284')
    expect(savedGas.mul(burnChiGas).div(11)).to.eq(parseEther('0.001563516727272727'))
    await stopImpersonate(ME)
  })
})
async function whalePump(uniswapRouter: Contract, amount: BigNumber = parseEther('500')) {
  await impersonate(ETHWHALE)
  const signer = ethers.provider.getSigner(ETHWHALE)
  await uniswapRouter
    .connect(signer)
    .swapETHForExactTokens(amount, [WETH, CORE], ETHWHALE, Math.round(Date.now() / 100), {
      value: parseEther('5000'),
    })

  await stopImpersonate(ETHWHALE)
}
async function whalePumpDaiPair(uniswapRouter: Contract) {
  const amount = parseEther('1000000')
  await impersonate(ETHWHALE)
  const signer = ethers.provider.getSigner(ETHWHALE)
  const wdai = new Contract(WDAI, erc95Abi, ethers.provider).connect(signer)
  const dai = new Contract(DAI, ERC20_ABI, ethers.provider).connect(signer)
  await dai.approve(WDAI, amount)
  await wdai.wrap(ETHWHALE, amount)
  await uniswapRouter
    .connect(signer)
    .swapExactTokensForTokens(amount, 0, [WDAI, WCORE], ETHWHALE, Math.round(Date.now() / 100))

  await stopImpersonate(ETHWHALE)
}

async function whaleDump(uniswapRouter: Contract) {
  await impersonate(COREWHALE)
  const signer = ethers.provider.getSigner(COREWHALE)
  const balance = await getBalance(CORE, COREWHALE)
  console.log('balance', formatEther(balance))
  const core = getErc20Instance(CORE).connect(signer)
  await core.approve(uniswapRouter.address, parseEther('10000'))
  await uniswapRouter
    .connect(signer)
    .swapExactTokensForTokensSupportingFeeOnTransferTokens(
      parseEther('50'),
      0,
      [CORE, WETH],
      COREWHALE,
      Math.round(Date.now() / 100)
    )

  await stopImpersonate(COREWHALE)
}
async function getBalance(token: string, holder: string) {
  const erc20 = getErc20Instance(token)
  return (await erc20.balanceOf(holder)) as BigNumber
}
function getErc20Instance(token: string) {
  return new Contract(token, ERC20_ABI, ethers.provider)
}
